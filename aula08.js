// ----------------------------------------
// üìö Fun√ß√µes em JavaScript ‚Äî Conceito
// ----------------------------------------
// Fun√ß√£o = um bloco de c√≥digo nomeado (ou n√£o) que executa uma tarefa.
// Vantagens: reutiliza√ß√£o, organiza√ß√£o, legibilidade e testes.
// Regras/dicas:
// - Declarar: diz ao JS "existe uma tarefa com este nome".
// - Chamar (invocar): executa a tarefa (usa par√™nteses).
// - Nomeie fun√ß√µes com verbos no infinitivo: "calcularTotal", "buscarUsuario", etc.

// Declara√ß√£o de fun√ß√£o (function declaration)
function saudacao() {
  // Corpo da fun√ß√£o: tudo aqui s√≥ roda quando a fun√ß√£o √© CHAMADA.
  console.log("Ol√°! Seja bem-vindo ao curso de JavaScript.");
}

// Chamada (invoca√ß√£o). Sem os par√™nteses, NADA √© executado.
saudacao(); // ‚Üí "Ol√°! Seja bem-vindo ao curso de JavaScript."


// ----------------------------------------
// üîπ Par√¢metros e Argumentos
// ----------------------------------------
// Par√¢metros: vari√°veis listadas na defini√ß√£o da fun√ß√£o.
// Argumentos: valores reais passados na CHAMADA da fun√ß√£o.
// Dicas:
// - D√™ nomes claros aos par√¢metros.
// - Voc√™ pode definir VALORES PADR√ÉO para evitar "undefined".
// - Valide tipos quando necess√°rio (ex.: Number, String).

function apresentar(nome, idade = 0) {
  // `nome` e `idade` s√£o PAR√ÇMETROS.
  // `idade = 0` √© um valor padr√£o caso n√£o seja informado.
  console.log(`Meu nome √© ${nome} e tenho ${idade} anos.`);
}

// Aqui "Paula" e 28 s√£o ARGUMENTOS.
apresentar("Paula", 98); // ‚Üí "Meu nome √© Paula e tenho 98 anos."
apresentar("Jo√£o");      // ‚Üí "Meu nome √© Jo√£o e tenho 0 anos." (usou valor padr√£o)

// ----------------------------------------
// üî∏ Fun√ß√µes com Retorno (return)
// ----------------------------------------
// `return` devolve um valor para quem chamou a fun√ß√£o e ENCERRA a execu√ß√£o da fun√ß√£o.
// Diferen√ßa importante: `console.log` apenas IMPRIME; `return` DEVOLVE um valor.
// Voc√™ pode salvar o valor retornado em uma vari√°vel para usar depois.

function somar(a, b) {
  // (Boas pr√°ticas) Converta/valide os tipos se necess√°rio:
  const n1 = Number(a);
  const n2 = Number(b);

  // "Early return": sair cedo se algo estiver errado.
  if (!Number.isFinite(n1) || !Number.isFinite(n2)) {
    return NaN; // ou lance um erro, conforme o caso
  }

  return n1 + n2; // Depois de `return`, nada mais √© executado na fun√ß√£o.
}

const totalSoma = somar(5, 7);
console.log("Resultado da soma:", totalSoma); // ‚Üí 12

// Se voc√™ esquecer de capturar o retorno, perde o valor:
somar(10, 20); // nada √© exibido, pois n√£o imprimimos; apenas retornou 30.

// ----------------------------------------
// üîπ Retornando "v√°rios valores"
// ----------------------------------------
// Uma fun√ß√£o s√≥ retorna UM valor. Para devolver "v√°rios", coloque-os em um OBJETO (mais claro)
// ou em um ARRAY (mais enxuto). Objetos s√£o prefer√≠veis pois trazem r√≥tulos (chaves).

function dividir(dividendo, divisor) {
  if (divisor === 0) {
    return { ok: false, erro: "Divis√£o por zero n√£o √© permitida." };
  }
  const quociente = Math.floor(dividendo / divisor);
  const resto = dividendo % divisor;
  return { ok: true, quociente, resto };
}

const resultadoDiv = dividir(17, 5);
if (resultadoDiv.ok) {
  console.log(`Quociente: ${resultadoDiv.quociente}, Resto: ${resultadoDiv.resto}`);
} else {
  console.log("Erro:", resultadoDiv.erro);
}

// ----------------------------------------
// üß© Fun√ß√£o como Valor (Fun√ß√£o de Primeira Classe)
// ----------------------------------------
// Em JS, fun√ß√µes s√£o "cidad√£s de primeira classe":
// - Podem ser atribu√≠das a vari√°veis
// - Podem ser passadas como argumento
// - Podem ser retornadas por outras fun√ß√µes

// Express√£o de fun√ß√£o (function expression) atribu√≠da a uma constante:
const dobrar = function (n) {
  return n * 2;
};

console.log(dobrar(9)); // ‚Üí 18

// Arrow function (sintaxe curta). Equivalente ao acima:
const triplicar = (n) => n * 3;

console.log(triplicar(7)); // ‚Üí 21

// ----------------------------------------
// üîÅ Fun√ß√µes de Callback (sincr√¥nicas)
// ----------------------------------------
// Callback = fun√ß√£o passada como argumento para ser executada dentro de outra.
// √ötil para customizar um "ponto de extens√£o": a fun√ß√£o principal chama o callback
// em determinado momento com dados que voc√™ define.

function executarOperacao(a, b, operacao) {
  // `operacao` √© um callback: esperamos que seja uma fun√ß√£o (a, b) => algo
  if (typeof operacao !== "function") {
    return NaN;
  }
  return operacao(a, b);
}

// Callbacks nomeados:
function somarCb(x, y) { return x + y; }
function multiplicarCb(x, y) { return x * y; }

console.log(executarOperacao(3, 4, somarCb));        // ‚Üí 7
console.log(executarOperacao(3, 4, multiplicarCb));  // ‚Üí 12

// Callback an√¥nimo (arrow) diretamente na chamada:
console.log(executarOperacao(10, 5, (x, y) => x - y)); // ‚Üí 5

// ----------------------------------------
// ‚è≥ Fun√ß√µes de Callback (ass√≠ncronas)
// ----------------------------------------
// Em opera√ß√µes ass√≠ncronas (ex.: ler arquivo, acessar rede, timers),
// o callback √© chamado FUTURAMENTE, quando o dado ficar pronto.
// Demonstra√ß√£o com setTimeout (simula algo "demorado"):

console.log("In√≠cio");

setTimeout(() => {
  console.log("Rodou depois de 500ms (callback ass√≠ncrono).");
}, 500);

console.log("Fim");
// Ordem de sa√≠da:
// 1) "In√≠cio"
// 2) "Fim"
// 3) "Rodou depois de 500ms ..."  (porque o callback roda depois do tempo)

// ----------------------------------------
// üß† Extras √∫teis sobre fun√ß√µes
// ----------------------------------------
// Escopo: vari√°veis criadas dentro da fun√ß√£o n√£o "vazam" para fora.
// Hoisting: declara√ß√µes `function nome(){}` s√£o i√ßadas (voc√™ pode cham√°-las antes de declarar).
// J√° express√µes de fun√ß√£o (const f = function(){}) N√ÉO s√£o i√ßadas da mesma forma.
// Side effects: fun√ß√µes que alteram algo fora delas (ex.: vari√°vel global, DOM). Prefira fun√ß√µes puras quando poss√≠vel.
// Dica: Retorno ‚â† Impress√£o. Use `return` para DEVOLVER dados e `console.log` apenas para visualizar.
// Dica: Valide par√¢metros e use "early return" para deixar o fluxo claro.


