// ----------------------------------------------
// Aula: Express√µes Regulares (Regex) em JavaScript
// ----------------------------------------------

// ‚úÖ O que √© Regex?
// Express√£o Regular (Regex) √© um padr√£o usado para buscar, validar ou substituir strings.

// üìå Formas de declarar:
const regex1 = /abc/;             // Literal
const regex2 = new RegExp("abc"); // Usando o construtor

// ----------------------------------------------
// üîπ Exemplos b√°sicos de valida√ß√£o
// ----------------------------------------------

// Valida se a string cont√©m exatamente 4 d√≠gitos num√©ricos
const regexNumero4Digitos = /^\d{4}$/;
//console.log(regexNumero4Digitos.test("1234")); // true
//console.log(regexNumero4Digitos.test("12a4")); // false

// Valida√ß√£o b√°sica de e-mail
const regexEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
//console.log(regexEmail.test("usuario@email.com")); // true
//console.log(regexEmail.test("usuario@com"));        // false

// Valida√ß√£o de CEP brasileiro (ex: 27525-000)
const regexCep = /^\d{5}-\d{3}$/;
//console.log(regexCep.test("27525-100")); // true
//console.log(regexCep.test("2752-100"));  // false

// ----------------------------------------------
// üîπ Substitui√ß√µes e buscas
// ----------------------------------------------

// Substituindo uma palavra ofensiva por asteriscos
const frase = "Voc√™ √© um idiota!";
const regexOfensiva = /idiota/i; // i = case insensitive
const fraseLimpa = frase.replace(regexOfensiva, "****");
//console.log(fraseLimpa); // "Voc√™ √© um ****"

// Procurando todas as datas no formato dd/mm/yyyy
const texto = "Hoje √© dia 08/07/2025. Amanh√£ ser√° 09/07/2025.";
const regexDatas = /\d{2}\/\d{2}\/\d{4}/g;
//console.log(texto.match(regexDatas)); // ["08/07/2025", "09/07/2025"]

// ----------------------------------------------
// üîπ Senhas fortes (m√≠nimo 8 caracteres, 1 mai√∫scula, 1 min√∫scula, 1 n√∫mero, 1 s√≠mbolo)
// ----------------------------------------------
// Essa express√£o exige que a senha tenha:
// Pelo menos uma letra min√∫scula


// Pelo menos uma letra mai√∫scula
// Pelo menos um n√∫mero
// Pelo menos um caractere especial
// No m√≠nimo 8 caracteres no total

// Somente letras, n√∫meros e os s√≠mbolos permitidos
const regexSenhaForte = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*#?&])[A-Za-z\d@$!%*#?&]{8,}$/;
// console.log(regexSenhaForte.test("Aa123456!")); // true
// console.log(regexSenhaForte.test("senha123"));  // false


// S√≠mbolo	Significado	                        Exemplo
// \d	    Qualquer d√≠gito (0 a 9)	            /\d\d\d/ ‚Üí "123"
// \w	    Qualquer caractere de palavra	    /\w+/ ‚Üí "teste_123"
// .	    Qualquer caractere (exceto \n)	    /t.ste/ ‚Üí "teste", "taste"
// ^	    In√≠cio da string	                /^oi/ ‚Üí "oi tudo bem?"
// $	    Fim da string	                    /fim$/ ‚Üí "acabou fim"
// +	    Um ou mais	                        /a+/ ‚Üí "aaaa"
// *	    Zero ou mais	                    /a*/ ‚Üí "", "aa"
// ?	    Zero ou um	                        /oi?/ ‚Üí "o", "oi"
// []	    Conjunto de caracteres	            /[aeiou]/
// {}	    Quantidade	                        /\d{5}-\d{3}/ ‚Üí CEP

// ----------------------------------------------
// üß™ Exerc√≠cios propostos:
// 1. Criar regex que valide telefones no formato (99) 99999-9999
const regextel = /^\d{2}\s\d{5}-\d{4}$/;
console.log(regextel.test("15 99781-7243"))

// 2. Criar regex que valide nomes que tenham pelo menos 2 palavras
const regexname = /^[A-Za-z√Ä-√ø]+(?:\s+[A-Za-z√Ä-√ø]+)+$/
console.log(regexname.test("Ta√≠s Santos"));