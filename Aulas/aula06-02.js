// ----------------------------------------------
// Aula: Try/Catch em JavaScript
// ----------------------------------------------

// ‚úÖ O que √© try/catch?
// √â uma estrutura usada para capturar e tratar erros no seu c√≥digo,
// impedindo que ele quebre completamente.

// Sintaxe b√°sica:
try {
    // C√≥digo que pode gerar erro
} catch (erro) {
    // C√≥digo que trata o erro
    console.error("Erro capturado:", erro.message);
}

// ----------------------------------------------
// üîπ Exemplo 1: Erro ao acessar propriedade de um objeto nulo
// ----------------------------------------------
const usuario = null;

try {
    console.log(usuario.nome); // Tentando acessar algo de "null"
} catch (erro) {
    console.warn("Erro ao acessar propriedade:", erro.message);
}

// ----------------------------------------------
// üîπ Exemplo 2: JSON inv√°lido
// ----------------------------------------------
const jsonInvalido = "{ nome: 'Jo√£o' }"; // Falta aspas em "nome"

try {
    const obj = JSON.parse(jsonInvalido);
    console.log(obj.nome);
} catch (erro) {
    console.error("Erro ao converter JSON:", erro.message);
}

// ----------------------------------------------
// üîπ Exemplo 3: Fun√ß√£o que lan√ßa erro manualmente
// ----------------------------------------------
function dividir(a, b) {
    if (typeof a !== "number" || typeof b !== "number") {
        throw new Error("Par√¢metros devem ser n√∫meros");
    }
    if (b === 0) {
        throw new Error("Divis√£o por zero n√£o √© permitida");
    }
    return a / b;
}

try {
    const resultado = dividir(10, 0);
    console.log("Resultado:", resultado);
} catch (erro) {
    console.error("Erro ao dividir:", erro.message);
}

// ----------------------------------------------
// üîπ Exemplo 4: Combinando Regex + try/catch
// ----------------------------------------------
function validarEmail(email) {
    const regexEmail = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!regexEmail.test(email)) {
        throw new Error("E-mail inv√°lido!");
    }
    return true;
}

try {
    validarEmail("usuario@dominio.com");
    console.log("E-mail v√°lido!");
} catch (erro) {
    console.error("Erro de valida√ß√£o:", erro.message);
}

// ----------------------------------------------
// üß™ Exerc√≠cios propostos:
// 1. Criar uma fun√ß√£o que some dois n√∫meros e trate se os argumentos forem inv√°lidos
// 2. Criar uma fun√ß√£o que valide CPF usando regex e try/catch (apenas formato)
// 3. Testar um JSON com erro e capturar o erro de parse com try/catch
